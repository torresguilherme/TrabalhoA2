# -*- coding: utf-8 -*-
"""TrabalhoA2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vKdyEvgUR2pfmV9d5dztSQJK0SwvK5te

Grupo Quinta feira (Cadastro de doa√ß√µes)

‚Ä¢ Guilherme Jos√© Silva Torres - 38141264
‚Ä¢ Cau√£ da Costa Cordeiro - 38446880
‚Ä¢ Pedro Henrique Pontes - 39294072
‚Ä¢ Arthur Moreira do Vale - 38634384
‚Ä¢ Johnatan Antunes- 39333086
‚Ä¢ Andre Felipe Oliveira - 38536935

üíª O que √© o sistema?

Um painel interativo desenvolvido em Python com Google Colab, que permite:
	‚Ä¢	Cadastrar alimentos e controlar o estoque com datas de validade
	‚Ä¢	Cadastrar ONGs que recebem doa√ß√µes
	‚Ä¢	Registrar doa√ß√µes associando alimento + quantidade + ONG + doador
	‚Ä¢	Visualizar relat√≥rios com alertas de vencimento e estoque
	‚Ä¢	Exportar tudo para Excel, de forma r√°pida e organizada

‚∏ª

üß© Tecnologias utilizadas
	‚Ä¢	Python ‚Äì Linguagem principal
	‚Ä¢	SQLite ‚Äì Banco de dados leve e embutido
	‚Ä¢	pandas ‚Äì Manipula√ß√£o de dados e exporta√ß√£o
	‚Ä¢	ipywidgets ‚Äì Interface visual e interativa dentro do Google Colab
	‚Ä¢	Google Colab ‚Äì Ambiente gratuito e online de execu√ß√£o

‚∏ª

üóÇÔ∏è Como o sistema est√° organizado

üî∏ 1. Cadastro de alimentos
	‚Ä¢	Nome, quantidade, unidade (kg, g, L‚Ä¶), validade
	‚Ä¢	Ao cadastrar, os alimentos entram no banco e aparecem no menu de doa√ß√µes

üî∏ 2. Cadastro de ONGs
	‚Ä¢	Nome e contato da ONG
	‚Ä¢	As ONGs aparecem como destino no momento da doa√ß√£o

üî∏ 3. Registro de doa√ß√µes
	‚Ä¢	Usu√°rio informa o doador, escolhe o alimento e a ONG
	‚Ä¢	O sistema verifica o estoque antes de confirmar
	‚Ä¢	Ap√≥s confirmar, a quantidade √© abatida automaticamente do estoque

üî∏ 4. Listagens inteligentes
	‚Ä¢	Alimentos listados com status:
	‚Ä¢	‚úÖ OK
	‚Ä¢	‚ö†Ô∏è Pr√≥ximo da validade ou estoque baixo
	‚Ä¢	‚ùå Vencido
	‚Ä¢	ONGs e doa√ß√µes podem ser visualizadas com dados completos

üî∏ 5. Exporta√ß√£o de relat√≥rios
	‚Ä¢	Gera 3 arquivos .xlsx com os dados de:
	‚Ä¢	Alimentos
	‚Ä¢	ONGs
	‚Ä¢	Doa√ß√µes

‚∏ª

üí° Destaques do sistema
	‚Ä¢	Interface 100% interativa e intuitiva
	‚Ä¢	Indicadores visuais de validade e estoque
	‚Ä¢	Atualiza√ß√£o autom√°tica dos menus suspensos
	‚Ä¢	C√≥digos limpos, comentados e organizados em fun√ß√µes reutiliz√°veis
	‚Ä¢	Pode ser facilmente adaptado para qualquer tipo de controle de estoque e repasse (roupas, medicamentos, etc.)
"""

import sqlite3  # Conecta com o banco de dados SQLite (leve e f√°cil de usar)
from datetime import datetime  # Para trabalhar com datas e hor√°rios
import ipywidgets as widgets  # Cria elementos interativos (caixas de texto, bot√µes, etc.)
from IPython.display import display, clear_output  # Exibe e limpa a interface no Google Colab
import pandas as pd  # Para lidar com tabelas e criar relat√≥rios em Excel

# --- CONFIGURA√á√ïES INICIAIS DO NOSSO SISTEMA ---
NOME_BANCO_DADOS = 'gestao_doacoes.db'  # Nome do nosso arquivo de banco de dados
DATE_FORMAT = "%Y-%m-%d"  # Formato padr√£o para datas (ex: 2025-06-01)
DATETIME_FORMAT = "%Y-%m-%d %H:%M:%S"  # Formato padr√£o para data e hora completas

# --- CONECTANDO COM O BANCO DE DADOS ---
conn = sqlite3.connect(NOME_BANCO_DADOS)  # Conecta ao arquivo do banco de dados (cria se n√£o existir)
cursor = conn.cursor()  # Cursor permite enviar comandos SQL para o banco

# --- CRIANDO AS TABELAS, CASO AINDA N√ÉO EXISTAM ---
# Tabela de ONGs cadastradas
cursor.execute('''
    CREATE TABLE IF NOT EXISTS ongs (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        contato TEXT
    )
''')

# Tabela de alimentos dispon√≠veis
cursor.execute('''
    CREATE TABLE IF NOT EXISTS alimentos (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        quantidade INTEGER NOT NULL,
        unidade TEXT NOT NULL,
        validade TEXT NOT NULL
    )
''')

# Tabela que registra cada doa√ß√£o feita
cursor.execute('''
    CREATE TABLE IF NOT EXISTS doacoes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        doador TEXT NOT NULL,
        alimento_id INTEGER NOT NULL,
        quantidade INTEGER NOT NULL,
        ong_id INTEGER NOT NULL,
        data_doacao TEXT NOT NULL,
        FOREIGN KEY (alimento_id) REFERENCES alimentos(id),
        FOREIGN KEY (ong_id) REFERENCES ongs(id)
    )
''')

conn.commit()  # Salva todas as altera√ß√µes feitas at√© aqui no banco

# --- UNIDADES PADR√ÉO PARA EVITAR ERROS DE DIGITA√á√ÉO ---
UNIDADES_FIXAS = ['kg', 'g', 'L', 'unidade', 'pacote']

# --- CAMPOS PARA CADASTRAR ALIMENTOS ---
nome_alimento = widgets.Text(description='Nome:')
quantidade_alimento = widgets.IntText(description='Qtd:')
validade_alimento = widgets.DatePicker(description='Validade:')
unidade_dropdown = widgets.Dropdown(description='Unidade:', options=UNIDADES_FIXAS)
botao_cadastrar_alimento = widgets.Button(description='Cadastrar Alimento')

# --- CAMPOS PARA CADASTRAR ONGS ---
nome_ong = widgets.Text(description='Nome:')
contato_ong = widgets.Text(description='Contato:')
botao_cadastrar_ong = widgets.Button(description='Cadastrar ONG')

# --- CAMPOS PARA REGISTRAR UMA NOVA DOA√á√ÉO ---
doador_input = widgets.Text(description='Doador:')
alimento_doacao_dropdown = widgets.Dropdown(description='Alimento:', options=[])
quantidade_doacao = widgets.IntText(description='Qtd:')
ong_doacao_dropdown = widgets.Dropdown(description='ONG:', options=[])
botao_cadastrar_doacao = widgets.Button(description='Registrar Doa√ß√£o')

# --- BOT√ÉO PARA EXPORTAR OS RELAT√ìRIOS EM EXCEL ---
botao_exportar = widgets.Button(description='Exportar Relat√≥rios')

# --- FUN√á√ÉO PARA ATUALIZAR O DROPDOWN DE ALIMENTOS ---
def atualizar_dropdown_alimentos():
    cursor.execute('SELECT id, nome FROM alimentos')
    alimentos = [(f"{a[0]} - {a[1]}", a[0]) for a in cursor.fetchall()]
    alimento_doacao_dropdown.options = alimentos

# --- FUN√á√ÉO PARA ATUALIZAR O DROPDOWN DE ONGS ---
def atualizar_dropdown_ongs():
    cursor.execute('SELECT id, nome FROM ongs')
    ongs = [(f"{o[0]} - {o[1]}", o[0]) for o in cursor.fetchall()]
    ong_doacao_dropdown.options = ongs

# --- AQUI COME√áAM AS A√á√ïES DO SISTEMA ---
# Cadastrar um novo alimento

def cadastrar_alimento(b):
    with container:
        clear_output()
        nome = nome_alimento.value.strip()
        quantidade = quantidade_alimento.value
        validade = validade_alimento.value
        unidade = unidade_dropdown.value

        # Verifica se todos os campos foram preenchidos corretamente
        if not (nome and quantidade > 0 and validade and unidade):
            print("‚ùå Por favor, preencha todos os campos corretamente.")
            return

        validade_str = validade.strftime(DATE_FORMAT)
        cursor.execute('''
            INSERT INTO alimentos (nome, quantidade, unidade, validade)
            VALUES (?, ?, ?, ?)
        ''', (nome, quantidade, unidade, validade_str))
        conn.commit()
        print(f"‚úÖ Alimento '{nome}' cadastrado com sucesso!")
        atualizar_dropdown_alimentos()

# Listar os alimentos j√° cadastrados com status visual

def listar_alimentos():
    with container:
        clear_output()
        df = pd.read_sql_query('SELECT * FROM alimentos', conn)

        if df.empty:
            print("‚ùå Nenhum alimento foi cadastrado ainda.")
            return

        hoje = datetime.now().date()
        status = []

        for _, row in df.iterrows():
            validade = datetime.strptime(row['validade'], DATE_FORMAT).date()
            dias = (validade - hoje).days
            if dias < 0:
                s = '‚ùå VENCIDO'
            elif dias <= 30:
                s = '‚ö†Ô∏è VENCE LOGO'
            else:
                s = '‚úÖ OK'
            status.append(s)

        df['Status'] = status
        df['Estoque'] = df['quantidade'].apply(lambda x: '‚ö†Ô∏è Baixo' if x <= 5 else '‚úÖ OK')
        display(df)

# Cadastrar nova ONG

def cadastrar_ong(b):
    with container:
        clear_output()
        nome = nome_ong.value.strip()
        contato = contato_ong.value.strip()

        if not nome:
            print("‚ùå O nome da ONG √© obrigat√≥rio.")
            return

        cursor.execute('INSERT INTO ongs (nome, contato) VALUES (?, ?)', (nome, contato))
        conn.commit()
        print(f"‚úÖ ONG '{nome}' cadastrada com sucesso!")
        atualizar_dropdown_ongs()

# Listar as ONGs cadastradas

def listar_ongs():
    with container:
        clear_output()
        df = pd.read_sql_query('SELECT * FROM ongs', conn)

        if df.empty:
            print("‚ùå Nenhuma ONG cadastrada ainda.")
        else:
            display(df)

# Registrar uma nova doa√ß√£o

def cadastrar_doacao(b):
    with container:
        clear_output()
        doador = doador_input.value.strip()
        alimento_id = alimento_doacao_dropdown.value
        quantidade = quantidade_doacao.value
        ong_id = ong_doacao_dropdown.value

        if not (doador and alimento_id and quantidade > 0 and ong_id):
            print("‚ùå Preencha todos os campos corretamente.")
            return

        cursor.execute('SELECT quantidade FROM alimentos WHERE id = ?', (alimento_id,))
        atual = cursor.fetchone()

        if not atual or atual[0] < quantidade:
            print("‚ùå N√£o h√° estoque suficiente desse alimento.")
            return

        data_doacao = datetime.now().strftime(DATETIME_FORMAT)
        cursor.execute('''
            INSERT INTO doacoes (doador, alimento_id, quantidade, ong_id, data_doacao)
            VALUES (?, ?, ?, ?, ?)
        ''', (doador, alimento_id, quantidade, ong_id, data_doacao))

        cursor.execute('UPDATE alimentos SET quantidade = quantidade - ? WHERE id = ?', (quantidade, alimento_id))
        conn.commit()
        print(f"‚úÖ Doa√ß√£o registrada por '{doador}' com sucesso!")
        atualizar_dropdown_alimentos()

# Mostrar todas as doa√ß√µes realizadas

def listar_doacoes():
    with container:
        clear_output()
        df = pd.read_sql_query('''
            SELECT d.id, d.doador, a.nome as alimento, d.quantidade, o.nome as ONG, d.data_doacao
            FROM doacoes d
            JOIN alimentos a ON d.alimento_id = a.id
            JOIN ongs o ON d.ong_id = o.id
            ORDER BY d.data_doacao DESC
        ''', conn)

        if df.empty:
            print("‚ùå Nenhuma doa√ß√£o foi registrada ainda.")
        else:
            display(df)

# Gera relat√≥rios em Excel com todos os dados cadastrados

def exportar_relatorios(b):
    with container:
        clear_output()

        alimentos = pd.read_sql_query('SELECT * FROM alimentos', conn)
        doacoes = pd.read_sql_query('''
            SELECT d.id, d.doador, a.nome as alimento, d.quantidade, o.nome as ONG, d.data_doacao
            FROM doacoes d
            JOIN alimentos a ON d.alimento_id = a.id
            JOIN ongs o ON d.ong_id = o.id
        ''', conn)
        ongs = pd.read_sql_query('SELECT * FROM ongs', conn)

        alimentos.to_excel('relatorio_alimentos.xlsx', index=False)
        doacoes.to_excel('relatorio_doacoes.xlsx', index=False)
        ongs.to_excel('relatorio_ongs.xlsx', index=False)

        print("‚úÖ Relat√≥rios exportados com sucesso!")

# --- VINCULA CADA BOT√ÉO √Ä SUA FUN√á√ÉO ---
botao_cadastrar_alimento.on_click(cadastrar_alimento)
botao_cadastrar_ong.on_click(cadastrar_ong)
botao_cadastrar_doacao.on_click(cadastrar_doacao)
botao_exportar.on_click(exportar_relatorios)

# --- PREPARANDO A INTERFACE ---
atualizar_dropdown_alimentos()
atualizar_dropdown_ongs()
container = widgets.Output()
menu = widgets.ToggleButtons(
    options=[
        'Cadastrar Alimento',
        'Listar Alimentos',
        'Cadastrar ONG',
        'Listar ONGs',
        'Registrar Doa√ß√£o',
        'Listar Doa√ß√µes',
        'Exportar Relat√≥rios'
    ],
    description='Menu:'
)

def exibir_menu(change):
    with container:
        clear_output()
        opcao = menu.value

        if opcao == 'Cadastrar Alimento':
            display(widgets.VBox([nome_alimento, quantidade_alimento, validade_alimento, unidade_dropdown, botao_cadastrar_alimento]))
        elif opcao == 'Listar Alimentos':
            listar_alimentos()
        elif opcao == 'Cadastrar ONG':
            display(widgets.VBox([nome_ong, contato_ong, botao_cadastrar_ong]))
        elif opcao == 'Listar ONGs':
            listar_ongs()
        elif opcao == 'Registrar Doa√ß√£o':
            display(widgets.VBox([doador_input, alimento_doacao_dropdown, quantidade_doacao, ong_doacao_dropdown, botao_cadastrar_doacao]))
        elif opcao == 'Listar Doa√ß√µes':
            listar_doacoes()
        elif opcao == 'Exportar Relat√≥rios':
            exportar_relatorios(None)

menu.observe(exibir_menu, names='value')

# --- EXIBIR O MENU E √ÅREA DE CONTE√öDO ---
display(menu, container)